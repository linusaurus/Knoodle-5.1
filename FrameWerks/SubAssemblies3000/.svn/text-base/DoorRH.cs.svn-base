#region Copyright (c) 2007 WeaselWare Software
/************************************************************************************
'
' Copyright  2007 WeaselWare Software 
'
' This software is provided 'as-is', without any express or implied warranty. In no 
' event will the authors be held liable for any damages arising from the use of this 
' software.
' 
' Permission is granted to anyone to use this software for any purpose, including 
' commercial applications, and to alter it and redistribute it freely, subject to the 
' following restrictions:
'
' 1. The origin of this software must not be misrepresented; you must not claim that 
' you wrote the original software. If you use this software in a product, an 
' acknowledgment (see the following) in the product documentation is required.
'
' Portions Copyright 2007 WeaselWare Software
'
' 2. Altered source versions must be plainly marked as such, and must not be 
' misrepresented as being the original software.
'
' 3. This notice may not be removed or altered from any source distribution.
'
'***********************************************************************************/
#endregion

using System;
using System.Collections.Generic;
using System.Text;
using FrameWerks;
using System.Runtime;

namespace FrameWerks.System3000
{
    [UnitType("Dumb Module")]
    public class DoorRH : SubAssemblyBase
    {

        #region Fields

        static int createID;
        Part part;
        string partleader;

        #endregion

        #region Constructor

        public DoorRH()
        {
            m_subAssemblyID = Guid.NewGuid();
            this.ModelID = "Sys3000-DoorRH";


        }

        #endregion

        #region Methods

        //Bill of Material
        public override void Build()
        {

            partleader = this.Parent.UnitID + "." + this.CreateID.ToString();

            #region Panel-Frame

            // StileRight -->>
            part = new Part(1167, "StileR", this, 1, m_subAssemblyHieght);
            part.PartGroupType = "Panel-Parts";
            part.PartLabel = "";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            // StileLeft <<--
            part = new Part(1167, "StileL", this, 1, m_subAssemblyHieght);
            part.PartGroupType = "Panel-Parts";
            part.PartLabel = "M-1775 Hinge";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            // RailTop ^^
            part = new Part(1167, "RailT", this, 1, m_subAssemblyWidth);
            part.PartGroupType = "Panel-Parts";
            part.PartLabel = "";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            // RailBottom ||
            part = new Part(1167, "RailB", this, 1, m_subAssemblyWidth);
            part.PartGroupType = "Panel-Parts";
            part.PartLabel = "";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            // Hardware Build-Out
            part = new Part(1167, "Hardware Build-out", this, 1, 9.5m);
            part.PartGroupType = "Panel-Parts";
            part.PartLabel = "";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            // Hardware Build-out End Caps
            part = new Part(1167, "Build-out Ends", this, 2, 1.3125m);
            part.PartGroupType = "Panel-Parts";
            part.PartLabel = "Mitred End Caps";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);



            #endregion

            #region Filler

            part = new Part(1816, "Filler-Top", this, 1, m_subAssemblyWidth + 0.25m);
            part.PartGroupType = "Filler-Parts";
            part.PartLabel = "";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            part = new Part(1817, "Filler-Bottom", this, 1, m_subAssemblyWidth + 0.25m);
            part.PartGroupType = "Filler-Parts";
            part.PartLabel = "";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            part = new Part(1813, "Filler-Left", this, 1, m_subAssemblyHieght + 0.25m);
            part.PartGroupType = "Filler-Parts";
            part.PartLabel = "";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            part = new Part(1816, "Filler-Right", this, 1, m_subAssemblyHieght + 0.25m);
            part.PartGroupType = "Filler-Parts";
            part.PartLabel = "";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            #endregion

            #region Stops

            // RightVerticalStops
            part = new Part(809, "StopsR", this, 2, m_subAssemblyHieght - (1.3125m * 2.0m));
            part.PartGroupType = "Stop-Parts";
            part.PartLabel = "Miter Ends";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            // TopHorizontalStops
            part = new Part(809, "StopsT", this, 2, m_subAssemblyWidth - (1.3125m * 2.0m));
            part.PartGroupType = "Stop-Parts";
            part.PartLabel = "Miter Ends";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            // BottomHorzontalStopFront
            string crap;
            crap = Utils.Dim.StopWeepMachining(m_subAssemblyWidth - 2.0m * 1.3125m);
            part = new Part(809, "StopFrontB", this, 1, m_subAssemblyWidth - (1.3125m * 2.0m));
            part.PartGroupType = "Stop-Parts";
            part.PartLabel = "1) Miter Ends" + "\r\n" +
                             "2)" + crap;
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            // BottomHorzontalStopRear
            part = new Part(809, "StopsRearB", this, 1, m_subAssemblyWidth - (1.3125m * 2.0m));
            part.PartGroupType = "Stop-Parts";
            part.PartLabel = "Miter Ends";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            // LeftVerticalStopsLower
            part = new Part(809, "StopsL-Lower", this, 2, 28.6875m);
            part.PartGroupType = "Stop-Parts";
            part.PartLabel = "Miter Ends";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            // LeftVerticalStopsUpper
            part = new Part(809, "StopsL-Upper", this, 2, m_subAssemblyHieght - 39.5m);
            part.PartGroupType = "Stop-Parts";
            part.PartLabel = "Miter Ends";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            // Handle Edge
            part = new Part(1167, "Stop-Handle Edge", this, 2, 11.75m);
            part.PartGroupType = "Stop-Parts";
            part.PartLabel = "MiterOuterBoth";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            // Handle Edge Return
            part = new Part(1167, "Stop-Handle Edge Return", this, 4, 2.0623m);
            part.PartGroupType = "Stop-Parts";
            part.PartLabel = "Miter1Inner1Outer";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);



            #endregion

            #region HardWare Logic

            

            // Hinges
            part = new Part(1775, "Hinges", this, HingeCount(m_subAssemblyHieght), 0.0m);
            part.PartGroupType = "Hardware-Parts";
            part.PartLabel = "";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            // Assembly Braces
            part = new Part(1117, "Assembly Braces", this, 8, 0.0m);
            part.PartGroupType = "Hardware-Parts";
            part.PartLabel = "";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            // Tube Backer
            part = new Part(1640, "Tube Backer", this, HingeCount(m_subAssemblyHieght), 0.0m);
            part.PartGroupType = "Hardware-Parts";
            part.PartLabel = "";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            // Bar Backer
            part = new Part(2055, "Bar Backer", this, HingeCount(m_subAssemblyHieght) * 2, 0.0m);
            part.PartGroupType = "Hardware-Parts";
            part.PartLabel = "";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            Hoppe hoppe = new Hoppe(m_subAssemblyHieght, this);
            foreach (Part innerpart in hoppe.Parts)
            {
                innerpart.PartIdentifier = partleader + "." + Convert.ToString(createID++);
                this.Parts.Add(innerpart);

            }
            #endregion

            #region WeatherSeals

            //Door Bulb Seals
            part = new Part(1769, "Bulb Seal Door", this, 1, ((m_subAssemblyHieght * 2.0m) + (m_subAssemblyWidth * 2.0m)));
            part.PartGroupType = "Seals-Parts";
            part.PartLabel = "";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            // Glazing Seal
            decimal peri = FrameWerks.Utils.Dim.Perimeter(m_subAssemblyWidth - (1.3125m * 2.0m),
             m_subAssemblyHieght - (1.3125m * 2.0m));
            part = new Part(1819, "Glazing Seal", this, 1, peri *= 2.0m);
            part.PartGroupType = "Seals-Parts";
            part.PartLabel = "";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            // Door Bottom
            part = new Part(1518, "Door Bottom", this, 1, m_subAssemblyWidth);
            part.PartGroupType = "Seals-Parts";
            part.PartLabel = "";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);





            #endregion

            #region Glass


            //Glass Panel
            part = new Part(2828);
            part.FunctionalName = "Glass";
            part.PartGroupType = "Glass-Parts";
            part.Qnty = 1;
            part.PartName = "";
            part.PartLabel = "Notched For Handle";
            part.ContainerAssembly = this;
            part.PartWidth = m_subAssemblyWidth - (1.625m * 2.0m);
            part.PartLength = m_subAssemblyHieght - (1.625m * 2.0m);
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);



            #endregion

                #region Labor


            Labor.LaborPart design =
                new FrameWerks.Labor.LaborPart(this, UnitOfLaborCosting.unit, "Design", 4.0m, 80.0m);
            this.LaborParts.Add(design);
            //Collect Information on Sizes: Measure: Provide Information for Approval: Order: Supervision

            Labor.LaborPart draft =
               new FrameWerks.Labor.LaborPart(this, UnitOfLaborCosting.unit, "Draft", 3.0m, 80.0m);
            this.LaborParts.Add(draft);
            //Typical Drawings

            Labor.LaborPart metalhours =
               new FrameWerks.Labor.LaborPart(this, UnitOfLaborCosting.unit, "MetalHours", 12.0m, 80.0m);
            this.LaborParts.Add(metalhours);
            //1 Recieve: 1 Handle: 1 CutSash: 1 CutGlassStop: 1.5 Machine: 1.5 Hardware Prep: 1 Mount Hardware: 4 Weld:

            Labor.LaborPart Finish =
               new FrameWerks.Labor.LaborPart(this, UnitOfLaborCosting.unit, "Finish", 4.0m, 80.0m);
            this.LaborParts.Add(Finish);
            //2 Sand Linegrain: 2 Finish:

            Labor.LaborPart glazing =
               new FrameWerks.Labor.LaborPart(this, UnitOfLaborCosting.unit, "Glazing", (this.Area * .10m) + 4.0m, 80.0m);
            this.LaborParts.Add(glazing);
            //0.5 Order: 0.5 Recieve: 0.5 Inspect/Reject: 0.5 Store/Handle: 0.5 SetGlass/Shim&Calk: 0.5 Set GlassStop: 0.5 GlazingSeals

            Labor.LaborPart prehang =
               new FrameWerks.Labor.LaborPart(this, UnitOfLaborCosting.unit, "Prehang", (this.Area * .10m) + 3.0m, 80.0m);
            this.LaborParts.Add(prehang);
            //2 FitSash into Frame: 1 Mount Weather Strips/Seals

            Labor.LaborPart stage =
               new FrameWerks.Labor.LaborPart(this, UnitOfLaborCosting.unit, "Stage", 1.0m, 80.0m);
            this.LaborParts.Add(stage);
            //1 Stage

            Labor.LaborPart load =
                new FrameWerks.Labor.LaborPart(this, UnitOfLaborCosting.unit, "Load", 1.0m, 80.0m);
            this.LaborParts.Add(load);
            //1 Load


            #endregion


        }


        private int HingeCount(decimal HingeAxisLength)
        {
            int result = 0;

            if (HingeAxisLength < 84.0m)
            {
                result = 3;
            }
            else if ((HingeAxisLength >= 84.0m) && (HingeAxisLength < 114.0m))
            {
                result = 4;
            }
            else if ((HingeAxisLength >= 114.0m) && (HingeAxisLength < 134.0m))
            {
                result = 5;
            }
            else if ((HingeAxisLength >= 134.0m) && (HingeAxisLength < 164.0m))
            {
                result = 6;
            }


            return result;
        }

       
        #endregion

    }
}