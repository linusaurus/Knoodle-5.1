#region Copyright (c) 2007 WeaselWare Software
/************************************************************************************
'
' Copyright  2007 WeaselWare Software 
'
' This software is provided 'as-is', without any express or implied warranty. In no 
' event will the authors be held liable for any damages arising from the use of this 
' software.
' 
' Permission is granted to anyone to use this software for any purpose, including 
' commercial applications, and to alter it and redistribute it freely, subject to the 
' following restrictions:
'
' 1. The origin of this software must not be misrepresented; you must not claim that 
' you wrote the original software. If you use this software in a product, an 
' acknowledgment (see the following) in the product documentation is required.
'
' Portions Copyright 2007 WeaselWare Software
'
' 2. Altered source versions must be plainly marked as such, and must not be 
' misrepresented as being the original software.
'
' 3. This notice may not be removed or altered from any source distribution.
'
'***********************************************************************************/
#endregion

using System;
using System.Collections.Generic;
using System.Text;
using FrameWerks;

namespace FrameWerks.System3000
{
    [UnitType("Dumb Module")]
    public class CasementVM2LHR : SubAssemblyBase
    {

        #region Fields

        static int createID;


        #endregion

        #region Constructor

        public CasementVM2LHR()
        {
            m_subAssemblyID = Guid.NewGuid();
            this.ModelID = "System3000-CasementVM2LHR";
        }

        #endregion

        #region Methods

        //Bill of Material
        public override void Build()
        {

            Part part;
            string partleader = this.Parent.UnitID + "." + this.CreateID.ToString();
            decimal pweight = FrameWerks.Utils.Dim.PanelWieghtS2000(m_subAssemblyWidth, m_subAssemblyHieght);

            string labelStileR = string.Empty;
            string labelStileL = string.Empty;
            string labelTopRail = string.Empty;
            string labelBotRail = string.Empty;


            #region Sash

            if (pweight <= 106.0m)
            {
                // Casement Hinge 995 T,996 B
                labelStileR = "";
                labelStileL = "";
                labelTopRail = "M-996";
                labelBotRail = "M-995";

            }
            else if (pweight > 106)
            {

                // Butt Hinge 665

                labelStileR = "";
                labelStileL = "M-665";
                labelTopRail = "";
                labelBotRail = "";


            }



            // StileR -->>
            part = new Part(1167, "StileR", this, 1, m_subAssemblyHieght);
            part.PartGroupType = "Sash-Parts";
            part.PartWidth = part.Source.Width;
            part.PartThick = part.Source.Height;
            part.PartLabel = labelStileR;
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);



            // StileL <<--
            part = new Part(1167, "StileL", this, 1, m_subAssemblyHieght);
            part.PartGroupType = "Sash-Parts";
            part.PartWidth = part.Source.Width;
            part.PartThick = part.Source.Height;
            part.PartLabel = labelStileL;
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);



            // RailT ^^
            part = new Part(1167, "RailT", this, 1, m_subAssemblyWidth);
            part.PartGroupType = "Sash-Parts";
            part.PartWidth = part.Source.Width;
            part.PartThick = part.Source.Height;
            part.PartLabel = labelTopRail;
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);



            // RailB ||
            part = new Part(1167, "RailB", this, 1, m_subAssemblyWidth);
            part.PartGroupType = "Sash-Parts";
            part.PartWidth = part.Source.Width;
            part.PartThick = part.Source.Height;
            part.PartLabel = labelBotRail;
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);



            #endregion

            #region GlassStop



            // StopVertL #809
            part = new Part(809, "StopVertL", this, 2, m_subAssemblyHieght - 2 * 1.3125m);
            part.PartGroupType = "GlassStop-Parts";
            part.PartLabel = "MiterEnds";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);



            // StopVertR #809
            part = new Part(809, "StopVertR", this, 2, m_subAssemblyHieght - 2 * 1.3125m);
            part.PartGroupType = "GlassStop-Parts";
            part.PartLabel = "MiterEnds";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);



            // StopT #809

            part = new Part(809, "StopT", this, 2, m_subAssemblyWidth - 2 * 1.3125m);
            part.PartGroupType = "GlassStop-Parts";
            part.PartLabel = "MiterEnds";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);



            // StopBIn #809

            part = new Part(809, "StopBIn", this, 1, m_subAssemblyWidth - 2 * 1.3125m);
            part.PartGroupType = "GlassStop-Parts";
            part.PartLabel = "MiterEnds";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);



            // StopBOut #809

            string crap;
            crap = Utils.Dim.StopWeepMachining(m_subAssemblyWidth - 2 * 1.3125m);
            part = new Part(809, "StopBOut", this, 1, m_subAssemblyWidth - 2 * 1.3125m);
            part.PartGroupType = "GlassStop-Parts";
            part.PartLabel = "1)MiterEnds" + "\r\n" +
                             "2)" + crap;
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);




            #endregion

            #region Muntin



            // Muntin Bar ||
            part = new Part(1862, "Muntin Bars-V", this, 4, m_subAssemblyHieght - 2.0m * 2.0625m);
            part.PartGroupType = "Muntin-Parts";
            part.PartLabel = "";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);



            #endregion

            #region FoamTape


            // Foam Tape Vertical ||  #2808
            part = new Part(2808, "FoamTape", this, 4, m_subAssemblyHieght - 2.0m * 2.0625m);
            part.PartGroupType = "FoamTape-Parts";
            part.PartLabel = "";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);


            #endregion

            #region Glass

            //Glass Panel
            part = new Part(2828);
            part.FunctionalName = "Glass";
            part.PartGroupType = "Glass-Parts";
            part.Qnty = 1;
            part.PartName = "PartName";
            part.PartLabel = "";
            part.ContainerAssembly = this;
            part.PartWidth = m_subAssemblyWidth - (1.625m * 2.0m);
            part.PartLength = m_subAssemblyHieght - (1.625m * 2.0m);
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);


            #endregion

            #region Seal/Weatherstripping


            decimal peri = Utils.Dim.Perimeter(m_subAssemblyHieght, m_subAssemblyWidth);

            //Sash Edge Seal
            part = new Part(1769, "Edge Seal", this, 1, peri * 2.0m);
            part.PartGroupType = "Seal-Parts";
            part.PartLabel = "";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);

            peri = Utils.Dim.Perimeter(m_subAssemblyHieght - 1.53125m, m_subAssemblyWidth - 1.53125m);

            //Glazing Seals
            part = new Part(1819, "Glazing Seal", this, 1, peri * 2.0m);
            part.PartGroupType = "Seal-Parts";
            part.PartLabel = "";
            part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
            m_parts.Add(part);


            #endregion

            #region Hardware



            if (pweight <= 106.0m)
            {
                // Casement Hinge
                part = new Part(995, "Casement Hinge", this, 1, 0m);
                part.PartGroupType = "Hardware-Parts";
                part.PartWidth = part.Source.Width;
                part.PartThick = part.Source.Height;
                part.PartLabel = "";
                part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
                m_parts.Add(part);


                // Casement Hinge
                part = new Part(996, "Casement Hinge", this, 1, 0m);
                part.PartGroupType = "Hardware-Parts";
                part.PartLabel = "";
                part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
                m_parts.Add(part);
            }
            else if (pweight > 106.0m)
            {

                // Butt Hinge

                int hcount = FrameWerks.Utils.Dim.HingeCount(m_subAssemblyHieght);
                part = new Part(665, "HD Hinge", this, hcount, 0m);
                part.PartGroupType = "Hardware-Parts";
                part.PartLabel = "";
                part.PartIdentifier = partleader + "." + Convert.ToString(createID++);
                m_parts.Add(part);

            }

            FrameWerks.System3000.HoppeCasement hoppe = new FrameWerks.System3000.HoppeCasement(m_subAssemblyHieght, this);
            foreach (Part innerpart in hoppe.Parts)
            {
                innerpart.PartIdentifier = partleader + "." + Convert.ToString(createID++);
                this.Parts.Add(innerpart);

            }



            //LeverHoppe








            #endregion

                #region Labor


            Labor.LaborPart design =
                new FrameWerks.Labor.LaborPart(this, UnitOfLaborCosting.unit, "Design", 4.0m, 80.0m);
            this.LaborParts.Add(design);
            //Measure: Collect Information on Sizes from Contractor: Provide Information for Approval: Samples Correspondence: Ordering: Supervision

            Labor.LaborPart draft =
               new FrameWerks.Labor.LaborPart(this, UnitOfLaborCosting.unit, "Draft", 3.0m, 80.0m);
            this.LaborParts.Add(draft);
            //Typical Drawings: Supervision

            Labor.LaborPart metalhours =
               new FrameWerks.Labor.LaborPart(this, UnitOfLaborCosting.unit, "MetalHours", 10.0m, 80.0m);
            this.LaborParts.Add(metalhours);
            //1 Recieve: 1 Handle: 1 CutFrame: 1 CutStop: 1.5 Machine: 1.5 HardwarePrep: 1 MountHardware: 2 Weld: 

            Labor.LaborPart muntinhours =
                new FrameWerks.Labor.LaborPart(this, UnitOfLaborCosting.unit, "MuntinHours", 2.0m, 80.0m);
            this.LaborParts.Add(muntinhours);
            //.5 Per Bar this 4 Bars:

            Labor.LaborPart finishhours =
               new FrameWerks.Labor.LaborPart(this, UnitOfLaborCosting.unit, "FinishHours", 4.0m, 80.0m);
            this.LaborParts.Add(finishhours);
            //2 LinegrainSand: 2 Finish

            Labor.LaborPart glazinglhours =
               new FrameWerks.Labor.LaborPart(this, UnitOfLaborCosting.unit, "GlazingHours", (this.Area * 0.1m) + 4.0m, 80.0m);
            this.LaborParts.Add(glazinglhours);
            //.5 Recieve: .5 InspectReject: .5 StoreHandle: 1.0 GlazeShimCalk: .5 SetGlassStop: 05 InsertGasket 

            Labor.LaborPart prehang =
               new FrameWerks.Labor.LaborPart(this, UnitOfLaborCosting.unit, "Prehang", (this.Area * 0.1m) + 3.0m, 80.0m);
            this.LaborParts.Add(prehang);
            //2 Fit Sash into Frame: 1 Mount Weather StripSeals

            Labor.LaborPart stage =
               new FrameWerks.Labor.LaborPart(this, UnitOfLaborCosting.unit, "Stage", 0.5m, 80.0m);
            this.LaborParts.Add(stage);
            //.5 Stage

            Labor.LaborPart load =
               new FrameWerks.Labor.LaborPart(this, UnitOfLaborCosting.unit, "Load", 0.5m, 80.0m);
            this.LaborParts.Add(load);
            //.5 Load

            #endregion



        }


        #endregion

    }




}